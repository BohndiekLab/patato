Getting Started
================

In order to use PATATO, you must have a Python environment set up on your computer. We recommend using
Anaconda (http://anaconda.com) to run Python, particularly if you are using Windows. You may wish to setup
a separate Anaconda environment to install PATATO to minimise conflicts between dependency versions.

.. tip::
    If you are using Anaconda, you may wish to create a new environment to install PATATO to. This can be
    done by running the following command in the Anaconda prompt:

        conda create -n patato python=3.9

    Then activate the environment by running:

        conda activate patato

    You can then install PATATO as normal.

Installation
+++++++++++++

.. hint::
    The reconstruction algorithms rely on JAX and CUDA to enable parallelisation and GPU support.
    Follow the instructions `on the jax website here <https://github.com/google/jax#installation>`_ to enable GPU
    support. Note that you must have a supported nVidia GPU and CUDA toolkit installed.

Windows Installation
--------------------

If you are using Windows, you may need to install an unofficial build of JAXLIB to support image
reconstruction. See (`this GitHub repository <https://github.com/cloudhan/jax-windows-builder>`_) for more details.

Setting up CUDA the easy way
-------------------------------------

The easy way to setup the CUDA toolkit (needed for image reconstruction) is as follows:

    conda install -c nvidia cuda-toolkit cudnn

Option 1: Install using pip
------------------------------------------------------

Once you have Python installed, you can install PATATO using pip:

    pip install patato

To enable GPU support on Linux or Mac run:

    pip install jax[gpu]

Option 2: Install from source
------------------------------------

To install the most recent version of PATATO from GitHub:

    pip install git+https://github.com/tomelse/MSOTAnalysis

Option 3: Install from source (editable)
----------------------------------------------------------

To install the development version of PATATO from GitHub and allow editing for development purposes:

    cd /path/to/installation/directory
    git clone https://github.com/tomelse/MSOTAnalysis
    cd MSOTAnalysis
    pip install -e .

Quick Start
++++++++++++++

To get started and check everything is working, run the following Python code (e.g. in a Python terminal
or in a Jupyter notebook).

Option 1: Python
------------------

.. code-block:: Python

    import patato as pat
    from patato.data import generate_basic_simulation
    import matplotlib.pyplot as plt

    # Generate simulated data with 16 detectors (returns Numpy arrays)
    p0_simulated, ts_simulated, detectors_simulated = generate_basic_simulation(16)

    # Make the numpy arrays into the TimeSeries class defined in PATATO.
    time_series_simulated = pat.PATimeSeries(ts_simulated[None, None],
                               dimensions=["frames", "wavelengths", "detectors","timeseries"],
                               attributes={"fs": 4e7})

    # Define a default preprocessor with a band pass filter:
    pre = pat.MSOTPreProcessor(lp_filter=7e6, hp_filter=5e3)

    lx = 0.01 # m
    nx = 200
    c = 1500 # m/s

    # Define a reconstructor - this is just a delay and sum algorithm.
    das = pat.Backprojection(field_of_view=(lx, lx, 0),
                                 n_pixels=(nx, nx, 1))

    processed, settings, _ = pre.run(time_series_simulated, None, detectors=detectors_simulated)
    rec, _, _ = das.run(processed, None, speed_of_sound=c, **settings)

    fig, (ax1, ax2) = plt.subplots(1, 2)
    ax1.imshow(p0_simulated, cmap="bone")
    ax1.axis("off")
    ax1.set_title("Simulated Pressure Distribution")

    rec.imshow(ax=ax2)
    ax2.set_title("Reconstructed Image")

    fig.suptitle("Image Comparison")
    plt.show()


Option 2: Command Line
------------------------

PATATO can also be run from the command line. To do so, we recommend having a data folder only containing
processed data (hdf5 format as generated by PATATO). The HDF5 files can be generated by PATATO by converting another
format into HDF5 using the appropriate command line tool. Currently only iThera data is supported, but more formats will
be added in future.

1. Convert iThera Data to HDF5 Format
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Converts all scans within a folder to hdf5 format. Outputs hdf5 format files in the second folder given.

.. code-block:: console

    msot-import-ithera /path/to/itherastudyfolder /path/to/processeddatafolder


2. Set speed of sounds for each scan
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Will loop through each scan within the specified folder,
allowing you to interactively tune the speed of sound. (this does a quick
backprojection, unless you specify a different preset). Specify a folder and a
starting speed of sound.

Not you can optionally include a line plot of the photoacoustic signal
through the centre of the images by adding the option ``-L True`` after
the command.

You can also change the default speed of sound in the second argument.

.. code-block:: console

    msot-set-speed-of-sound /path/to/processeddatafolder 1465

3. Reconstruct scan(s)
^^^^^^^^^^^^^^^^^^^^^^^^

Once you have set the speed of sound for a desired scan, you
can then run the reconstruction algorithm. By default this
uses a suitable backprojection, but you
can change this preset by passing a different json file on the command
line as optional argument ``-p /path/to/presets/___.json``.

The argument here can now be either a file or a folder.

.. code-block:: console

    msot-reconstruct /path/to/processeddatafolder

4. Spectral unmixing
^^^^^^^^^^^^^^^^^^^^^^

By default this downscales the MSOT images
by a factor of 2, unmixes into Hb/HbO2 and calculates sO2.
Like the reconstruction command, you can specify a preset, which gives you more
choice over chromophores e.g. melanin/ICG etc. You can also specify which
wavelengths to include in the unmixing. This will automatically run for all scans
unless you include the ``-f`` option, which will filter
out scans which have the text following this in their name
(for example, I quite often look at gas challenge data. When
I take the scan I always include GC_SS in the name, so I filter this).

.. code-block:: console

    msot-unmix /path/to/processeddatafolder

5. Draw regions of interest
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To draw regions of interest, use the ``msot-draw-roi`` command. This gives an interactive interface
with which you can draw polygons around a region that can be analysed later.
You can also specify the position (e.g. ``-n tumour -p left``).

.. code-block:: console

    msot-draw-roi /path/to/processeddatafolder -n ROINAME
